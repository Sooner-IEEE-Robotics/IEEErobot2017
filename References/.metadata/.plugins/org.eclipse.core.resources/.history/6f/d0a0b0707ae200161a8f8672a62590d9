#include "PIDController.h"

PIDController::PIDController(float process_init, float *k)
{
    last_process_var = process_init;
    err = 0;
    integrator = 0;

    kPID.push_back(k[0]);
    kPID.push_back(k[1]);
    kPID.push_back(k[2]);
}

float PIDController::GetOutput(float setpoint, float process)
{
    err = setpoint - process;
    float P = kPID[0] * err;

    integrator += err;
    float I = kPID[1] * integrator;

    float delta = process - last_process_var;
    float D = kPID[2] * delta;

    float output = coerce(P + I + D, 1.0f, -1.0f);

    return output;
}

float PIDController::coerce(float val, float upper, float lower)
{
    if(val > upper)
    {
        return upper;
    }
    else if(val < lower)
    {
        return lower;
    }
    return val;
}

PIDController::~PIDController()
{
    //dtor
}
